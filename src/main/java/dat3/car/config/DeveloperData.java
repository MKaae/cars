package dat3.car.config;

import dat3.car.entity.Car;
import dat3.car.entity.Member;
import dat3.car.entity.Reservation;
import dat3.car.repository.CarRepository;
import dat3.car.repository.MemberRepository;
import dat3.car.repository.ReservationRepository;
import dat3.security.entity.Role;
import dat3.security.entity.UserWithRoles;
import dat3.security.repository.UserWithRolesRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.context.annotation.Configuration;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

//Test data for cars is generated by ChatGPT.
@Configuration
public class DeveloperData implements ApplicationRunner {
    CarRepository carRepository;
    MemberRepository memberRepository;
    ReservationRepository reservationRepository;

    public DeveloperData(CarRepository carRepository, MemberRepository memberRepository, ReservationRepository reservationRepository) {
        this.carRepository = carRepository;
        this.memberRepository = memberRepository;
        this.reservationRepository = reservationRepository;
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        List<Car> cars = new ArrayList<>();
        List<Member> members = new ArrayList<>();

        cars.add(new Car("Toyota", "Corolla", 675, 15));
        cars.add(new Car("Ford", "Focus", 560, 30));
        cars.add(new Car("Chevrolet", "Cruze", 806, 25));
        cars.add(new Car("Nissan", "Sentra", 257, 40));
        cars.add(new Car("Honda", "Civic", 441, 5));
        cars.add(new Car("Toyota", "Corolla", 562, 10));
        cars.add(new Car("Chevrolet", "Cruze", 292, 25));
        cars.add(new Car("Ford", "Focus", 481, 20));
        cars.add(new Car("Nissan", "Sentra", 594, 2));
        cars.add(new Car("Honda", "Civic", 362, 10));
        cars.add(new Car("Chevrolet", "Cruze", 295, 20));
        cars.add(new Car("Toyota", "Corolla", 370, 30));
        cars.add(new Car("Ford", "Focus", 255, 40));
        cars.add(new Car("Nissan", "Sentra", 374, 15));
        cars.add(new Car("Honda", "Civic", 705, 5));
        cars.add(new Car("Toyota", "Corolla", 962, 45));
        cars.add(new Car("Chevrolet", "Cruze", 759, 15));
        cars.add(new Car("Ford", "Focus", 884, 20));
        cars.add(new Car("Nissan", "Sentra", 956, 25));
        cars.add(new Car("Honda", "Civic", 733, 5));
        cars.add(new Car("Toyota", "Corolla", 598, 35));
        cars.add(new Car("Chevrolet", "Cruze", 689, 20));
        cars.add(new Car("Ford", "Focus", 737, 10));
        cars.add(new Car("Nissan", "Sentra", 318, 30));
        cars.add(new Car("Honda", "Civic", 875, 45));
        cars.add(new Car("Toyota", "Corolla", 848, 35));
        cars.add(new Car("Chevrolet", "Cruze", 521, 25));
        cars.add(new Car("Ford", "Focus", 785, 2));
        cars.add(new Car("Nissan", "Sentra", 711, 10));
        cars.add(new Car("Honda", "Civic", 579, 30));
        cars.add(new Car("Toyota", "Corolla", 977, 20));
        cars.add(new Car("Chevrolet", "Cruze", 405, 15));
        cars.add(new Car("Ford", "Focus", 815, 5));
        cars.add(new Car("Nissan", "Sentra", 695, 40));
        cars.add(new Car("Honda", "Civic", 398, 45));
        cars.add(new Car("Toyota", "Corolla", 734, 20));
        cars.add(new Car("Chevrolet", "Cruze", 222, 10));
        cars.add(new Car("Ford", "Focus", 434, 5));
        cars.add(new Car("Nissan", "Sentra", 820, 15));
        cars.add(new Car("Honda", "Civic", 722, 10));
        cars.add(new Car("Toyota", "Corolla", 561, 35));
        cars.add(new Car("Chevrolet", "Cruze", 299, 20));
        cars.add(new Car("Ford", "Focus", 755, 2));
        cars.add(new Car("Nissan", "Sentra", 373, 10));
        cars.add(new Car("Honda", "Civic", 321, 30));
        cars.add(new Car("Toyota", "Corolla", 470, 20));
        cars.add(new Car("Ford", "Focus", 755, 2));
        cars.add(new Car("Nissan", "Sentra", 373, 10));
        cars.add(new Car("Honda", "Civic", 321, 30));
        cars.add(new Car("Toyota", "Corolla", 470, 20));
        carRepository.saveAll(cars);

        members.add(new Member("farblossom", "123456", "abc@123.dk", "Jens",
                "Jensen", "Hvidovrevej 5", "Hvidovre", "2500"));
        members.add(new Member("eggbasket1", "password123", "email@email1.dk", "Hans",
                "Hansen", "Folehaven 1", "Valby", "2500"));
        memberRepository.saveAll(members);

        Member member1 = new Member("eggbasket", "password123", "email@email.dk", "Hans", "Hansen",
                "Folehaven 1", "Valby", "2500");
        Car car1 = new Car("Toyota", "Corolla", 470, 20);
        memberRepository.save(member1);
        carRepository.save(car1);
        LocalDate date = LocalDate.of(2023, 12, 12);
        LocalDate date2 = date.plusDays(1);
        Reservation res = new Reservation(date, member1, car1);
        Reservation res2 = new Reservation(date2, member1, car1);
        reservationRepository.save(res);
        reservationRepository.save(res2);

        System.out.println(car1.getReservations().size());
        System.out.println(member1.getReservations().size());
        System.out.println("Should find : " + reservationRepository.existsByCar_IdAndRentalDate(car1.getId(), date));
        System.out.println("Should NOT find : " + reservationRepository.existsByCar_IdAndRentalDate(car1.getId(), date.plusDays(5)));

        setupUserWithRoleUsers();

    }
    @Autowired
    UserWithRolesRepository userWithRolesRepository;

    final String passwordUsedByAll = "test12";

    /*****************************************************************************************
     NEVER  COMMIT/PUSH CODE WITH DEFAULT CREDENTIALS FOR REAL
     iT'S ONE OF THE TOP SECURITY FLAWS YOU CAN DO
     *****************************************************************************************/
    private void setupUserWithRoleUsers() {

        System.out.println("******************************************************************************");
        System.out.println("******* NEVER  COMMIT/PUSH CODE WITH DEFAULT CREDENTIALS FOR REAL ************");
        System.out.println("******* REMOVE THIS BEFORE DEPLOYMENT, AND SETUP DEFAULT USERS DIRECTLY  *****");
        System.out.println("**** ** ON YOUR REMOTE DATABASE                 ******************************");
        System.out.println("******************************************************************************");
        UserWithRoles user1 = new UserWithRoles("user1", passwordUsedByAll, "user1@a.dk");
        UserWithRoles user2 = new UserWithRoles("user2", passwordUsedByAll, "user2@a.dk");
        UserWithRoles user3 = new UserWithRoles("user3", passwordUsedByAll, "user3@a.dk");
        UserWithRoles user4 = new UserWithRoles("user4", passwordUsedByAll, "user4@a.dk");
        user1.addRole(Role.USER);
        user1.addRole(Role.ADMIN);
        user2.addRole(Role.USER);
        user3.addRole(Role.ADMIN);
        //No Role assigned to user4
        userWithRolesRepository.save(user1);
        userWithRolesRepository.save(user2);
        userWithRolesRepository.save(user3);
        userWithRolesRepository.save(user4);
    }
}
